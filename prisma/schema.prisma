// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  TREASURER
  USER
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id                    Int           @id @default(autoincrement())
  email                 String        @unique
  password              String
  name                  String
  role                  Role          @default(USER)
  phone                 String?
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  reservations          Reservation[]
  confirmedReservations Reservation[] @relation("PaymentConfirmations")
  confirmedPayments     PaymentRecord[]

  @@map("users")
}

model SwimmingSchedule {
  id          Int           @id @default(autoincrement())
  dayOfWeek   Int           // 1-7 for days of the week
  startTime   DateTime
  endTime     DateTime
  maxCapacity Int
  laneCount   Int
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@map("swimming_schedules")
}

model Reservation {
  id                 Int               @id @default(autoincrement())
  date               DateTime
  userId             Int               @map("user_id")
  user               User              @relation(fields: [userId], references: [id])
  scheduleId         Int               @map("schedule_id")
  schedule           SwimmingSchedule  @relation(fields: [scheduleId], references: [id])
  status             ReservationStatus @default(PENDING)
  isPaid             Boolean           @default(false) @map("is_paid")
  paymentDate        DateTime?         @map("payment_date")
  paymentConfirmedBy Int?              @map("payment_confirmed_by")
  treasurer          User?             @relation("PaymentConfirmations", fields: [paymentConfirmedBy], references: [id])
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  paymentRecords     PaymentRecord[]

  @@index([date, scheduleId])
  @@map("reservations")
}

model PaymentRecord {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  amount        Float
  paymentMethod String      @map("payment_method")
  confirmedById Int         @map("confirmed_by_id")
  confirmedBy   User        @relation(fields: [confirmedById], references: [id])
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@map("payment_records")
}
